// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project f667fc580d8d9346 "ApiFlow (copy)", do not edit manually */
import { stdin_default, } from './chunk-E5FUI76T.js';
import './chunk-ZBRL5O4H.js';
import './chunk-CCACG67X.js';
import './chunk-2EI5GVGJ.js';
import './chunk-WSFCRVEQ.js';

// /:https://framerusercontent.com/modules/fjvJ5gZJMrmSs4P3l3tX/dtuIpKjrEqJpU1Uv7mNp/YjSYmMwoo-2.js
import { jsx as e, jsxs as t, } from 'react/jsx-runtime';
import { ComponentPresetsConsumer as n, Link as o, } from 'unframer';
import { motion as r, } from 'unframer';
import * as a from 'react';
var richText = /* @__PURE__ */ t(a.Fragment, {
  children: [
    /* @__PURE__ */ e('h6', { children: 'Step 1: Setup Your Authorization', },),
    /* @__PURE__ */ t('p', {
      children: [
        'To initiate a batch call, you must first authenticate your request. Ensure you have your API key from signing up on the ',
        /* @__PURE__ */ e(o, {
          href: 'https://app.bland.ai/',
          nodeId: 'YjSYmMwoo',
          openInNewTab: true,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: 'developer portal', },),
        },),
        '.',
      ],
    },),
    /* @__PURE__ */ t('h6', {
      children: [
        /* @__PURE__ */ e(o, {
          href: 'https://docs.bland.ai/tutorials/send-1000-calls-at-once#step-2-create-the-base-prompt',
          nodeId: 'YjSYmMwoo',
          openInNewTab: false,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: '\u200B', },),
        },),
        'Step 2: Create the Base Prompt',
      ],
    },),
    /* @__PURE__ */ t('p', {
      children: [
        'Craft a base prompt that will be common across all calls in the batch. Use placeholders ',
        /* @__PURE__ */ e('code', { children: '{{curly braces}}', },),
        ' for dynamic content.',
      ],
    },),
    /* @__PURE__ */ e('p', { children: 'Example:', },),
    /* @__PURE__ */ e(r.div, {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%', },
      children: /* @__PURE__ */ e(n, {
        componentIdentifier: 'module:pVk4QsoHxASnVtUBp6jr/TbhpORLndv1iOkZzyo83/CodeBlock.js:default',
        children: (t2,) =>
          /* @__PURE__ */ e(stdin_default, {
            ...t2,
            code: '"You are calling {{business}} to renew their subscription to {{service}} before it expires on {{date}}.";',
            language: 'JSX',
          },),
      },),
    },),
    /* @__PURE__ */ t('h6', {
      children: [
        /* @__PURE__ */ e(o, {
          href: 'https://docs.bland.ai/tutorials/send-1000-calls-at-once#step-3-define-the-call-data',
          nodeId: 'YjSYmMwoo',
          openInNewTab: false,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: '\u200B', },),
        },),
        'Step 3: Define the Call Data',
      ],
    },),
    /* @__PURE__ */ t('p', {
      children: [
        'Specify the list of calls in the ',
        /* @__PURE__ */ e('code', { children: 'call_data', },),
        ' array. Each call must have a ',
        /* @__PURE__ */ e('code', { children: 'phone_number', },),
        ' and can include other properties corresponding to placeholders in your base prompt.',
      ],
    },),
    /* @__PURE__ */ e('p', { children: 'Example:', },),
    /* @__PURE__ */ e(r.div, {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%', },
      children: /* @__PURE__ */ e(n, {
        componentIdentifier: 'module:pVk4QsoHxASnVtUBp6jr/TbhpORLndv1iOkZzyo83/CodeBlock.js:default',
        children: (t2,) =>
          /* @__PURE__ */ e(stdin_default, {
            ...t2,
            code:
              '[\n  {\n    phone_number: "1234567890",\n    business: "ABC co.",\n    service: "Netflix",\n    date: "September 4th",\n  },\n  {\n    phone_number: "32176540987",\n    business: "XYZ inc.",\n    service: "Window Cleaning",\n    date: "December 20th",\n  },\n];\n',
            language: 'JSX',
          },),
      },),
    },),
    /* @__PURE__ */ t('h6', {
      children: [
        /* @__PURE__ */ e(o, {
          href: 'https://docs.bland.ai/tutorials/send-1000-calls-at-once#step-4-additional-configuration',
          nodeId: 'YjSYmMwoo',
          openInNewTab: false,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: '\u200B', },),
        },),
        'Step 4: Additional Configuration',
      ],
    },),
    /* @__PURE__ */ t('ul', {
      style: {
        '--framer-font-size': '16px',
        '--framer-text-alignment': 'start',
        '--framer-text-color': 'rgb(155, 161, 177)',
        '--framer-text-stroke-width': '0px',
        '--framer-text-transform': 'none',
      },
      children: [
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [/* @__PURE__ */ e('code', { children: 'label', },), ': Assign a label to your batch for easy tracking.',],
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [/* @__PURE__ */ e('code', { children: 'campaign_id', },), ': Organize related batches under a campaign.',],
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [/* @__PURE__ */ e('code', { children: 'test_mode', },), ': Set to true for testing with the first call only.',],
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [/* @__PURE__ */ e('code', { children: 'batch_id', },), ': Manually set or auto-generated for tracking.',],
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [
              'Voice and Language Settings: Select ',
              /* @__PURE__ */ e('code', { children: 'voice_id', },),
              ', ',
              /* @__PURE__ */ e('code', { children: 'reduce_latency', },),
              ', and ',
              /* @__PURE__ */ e('code', { children: 'language', },),
              '.',
            ],
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [
              /* @__PURE__ */ e('code', { children: 'request_data', },),
              ': Include specific facts for the AI to know during the call.',
            ],
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [/* @__PURE__ */ e('code', { children: 'webook', },), ': For real-time notifications and transcripts post-call.',],
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [/* @__PURE__ */ e('code', { children: 'max_duration', },), ': Define the maximum length of each call.',],
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [/* @__PURE__ */ e('code', { children: 'amd', },), ': Enable for navigating phone trees or leaving voicemails.',],
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [/* @__PURE__ */ e('code', { children: 'wait_for_greeting', },), ': Control if the AI speaks immediately or waits.',],
          },),
        },),
      ],
    },),
    /* @__PURE__ */ t('h6', {
      children: [
        /* @__PURE__ */ e(o, {
          href: 'https://docs.bland.ai/tutorials/send-1000-calls-at-once#step-5-send-the-api-request',
          nodeId: 'YjSYmMwoo',
          openInNewTab: false,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: '\u200B', },),
        },),
        'Step 5: Send the API Request',
      ],
    },),
    /* @__PURE__ */ e('p', { children: 'Use the provided JavaScript or Python code snippet to make the API request.', },),
    /* @__PURE__ */ t('h6', {
      children: [
        /* @__PURE__ */ e(o, {
          href: 'https://docs.bland.ai/tutorials/send-1000-calls-at-once#step-6-handle-the-response',
          nodeId: 'YjSYmMwoo',
          openInNewTab: false,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: '\u200B', },),
        },),
        'Step 6: Handle the Response',
      ],
    },),
    /* @__PURE__ */ t('p', {
      children: [
        'After sending the batch request, you\u2019ll receive a response with a ',
        /* @__PURE__ */ e('code', { children: 'message', },),
        ' and the ',
        /* @__PURE__ */ e('code', { children: 'batch_id', },),
        '. Monitor the progress of your calls and any responses via your specified webhook.',
      ],
    },),
    /* @__PURE__ */ e('p', { children: 'Here\u2019s what an example response might look like:', },),
    /* @__PURE__ */ e(r.div, {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%', },
      children: /* @__PURE__ */ e(n, {
        componentIdentifier: 'module:pVk4QsoHxASnVtUBp6jr/TbhpORLndv1iOkZzyo83/CodeBlock.js:default',
        children: (t2,) =>
          /* @__PURE__ */ e(stdin_default, {
            ...t2,
            code: '{\n  "message": "success",\n  "batch_id": "3p$7rQ3p9sT5bzmF-gen-batch"\n}',
            language: 'JSX',
          },),
      },),
    },),
    /* @__PURE__ */ t('h6', {
      children: [
        /* @__PURE__ */ e(o, {
          href: 'https://docs.bland.ai/tutorials/send-1000-calls-at-once#step-7-monitoring-and-analytics',
          nodeId: 'YjSYmMwoo',
          openInNewTab: false,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: '\u200B', },),
        },),
        'Step 7: Monitoring and Analytics',
      ],
    },),
    /* @__PURE__ */ t('p', {
      children: [
        'Track the performance and outcomes of your batch calls through the provided ',
        /* @__PURE__ */ e('code', { children: 'batch_id', },),
        ' and campaign analytics. Adjust future batches based on the insights gained.',
      ],
    },),
    /* @__PURE__ */ e(r.div, {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%', },
      children: /* @__PURE__ */ e(n, {
        componentIdentifier: 'module:pVk4QsoHxASnVtUBp6jr/TbhpORLndv1iOkZzyo83/CodeBlock.js:default',
        children: (t2,) =>
          /* @__PURE__ */ e(stdin_default, {
            ...t2,
            code:
              '// Headers\nconst headers = {\n  authorization: "YOUR-API-KEY-HERE",\n};\n\n// Data\nconst data = {\n  base_prompt:\n    "You are calling {{business}} to renew their subscription to {{service}} before it expires on {{date}}.",\n  call_data: [\n    {\n      phone_number: "1234567890",\n      business: "ABC co.",\n      service: "Netflix",\n      date: "September 4th",\n    },\n    {\n      phone_number: "32176540987",\n      business: "XYZ inc.",\n      service: "Window Cleaning",\n      date: "December 20th",\n    },\n  ],\n  label: "Renewal Reminder - Wednesday Afternoon with female voice",\n  voice_id: 0,\n  max_duration: 10,\n  reduce_latency: true,\n  wait_for_greeting: true,\n};\n\n// API request\nawait axios.post("https://api.bland.ai/v1/batches", data, { headers });\n',
            language: 'JSX',
          },),
      },),
    },),
  ],
},);
var richText1 = /* @__PURE__ */ t(a.Fragment, {
  children: [
    /* @__PURE__ */ e('p', {
      children:
        'ApiFlow webhooks are signed with a secret key to ensure that they are not tampered with in transit and to confirm that they were sent by ApiFlow.',
    },),
    /* @__PURE__ */ t('h6', {
      children: [
        /* @__PURE__ */ e(o, {
          href: 'https://docs.bland.ai/tutorials/webhook-signing#signing-webhooks',
          nodeId: 'YjSYmMwoo',
          openInNewTab: false,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: '\u200B', },),
        },),
        'Signing Webhooks',
      ],
    },),
    /* @__PURE__ */ t('p', {
      children: [
        'When ApiFlow sends a webhook, it calculates a signature using the HMAC algorithm with the SHA-256 hash function. The signature is then included in the ',
        /* @__PURE__ */ e('code', { children: 'X-Webhook-Signature', },),
        ' header of the request.',
      ],
    },),
    /* @__PURE__ */ t('p', {
      children: [
        'To create a webhook signing secret, first go to the ',
        /* @__PURE__ */ e(o, {
          href: 'https://app.bland.ai/dashboard?page=settings',
          nodeId: 'YjSYmMwoo',
          openInNewTab: true,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: 'Account Settings in the Dev Portal', },),
        },),
        ' and click on the \u201CKeys\u201D tab.',
      ],
    },),
    /* @__PURE__ */ e('p', {
      children: 'Here you can create a new secret by clicking \u201CReplace Secret\u201D. It will only be shown once, so save it securely.',
    },),
    /* @__PURE__ */ e('p', {
      children: /* @__PURE__ */ e('code', { children: '<Tooltip tip="This is a tooltip!">Hover over me</Tooltip>', },),
    },),
    /* @__PURE__ */ t('h6', {
      children: [
        /* @__PURE__ */ e(o, {
          href: 'https://docs.bland.ai/tutorials/webhook-signing#verifying-webhooks',
          nodeId: 'YjSYmMwoo',
          openInNewTab: false,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: '\u200B', },),
        },),
        'Verifying Webhooks',
      ],
    },),
    /* @__PURE__ */ t('p', {
      children: [
        'To verify a webhook, you need to calculate the HMAC signature of the request body using the secret key and compare it to the signature in the ',
        /* @__PURE__ */ e('code', { children: 'X-Webhook-Signature', },),
        ' header.',
      ],
    },),
    /* @__PURE__ */ t('p', {
      children: [
        'Note that you must first create a webhook signing secret in the ',
        /* @__PURE__ */ e(o, {
          href: 'https://app.bland.ai/dashboard?page=settings',
          nodeId: 'YjSYmMwoo',
          openInNewTab: true,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: 'Account Settings in the Dev Portal', },),
        },),
        '.',
      ],
    },),
    /* @__PURE__ */ e('p', { children: 'Here is an example of how to verify a webhook in Node.js:', },),
    /* @__PURE__ */ e(r.div, {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%', },
      children: /* @__PURE__ */ e(n, {
        componentIdentifier: 'module:pVk4QsoHxASnVtUBp6jr/TbhpORLndv1iOkZzyo83/CodeBlock.js:default',
        children: (t2,) =>
          /* @__PURE__ */ e(stdin_default, {
            ...t2,
            code:
              'const crypto = require(\'node:crypto\');\n\nfunction verifyWebhookSignature(key, data, signature) {\n\n	const expectedSignature = crypto.createHmac(\'sha256\', key)\n        .update(data)\n        .digest(\'hex\');\n\n	return expectedSignature === signature;\n}\n\n//...\n\napp.post(\'/webhook\', (req, res) => {\n    const isValid = verifyWebhookSignature(\n        process.env.WEBHOOK_SECRET,\n        JSON.stringify(req.body),\n        req.headers[\'x-webhook-signature\']\n    );\n\n    //...\n});\n',
            language: 'JSX',
          },),
      },),
    },),
  ],
},);
var richText2 = /* @__PURE__ */ t(a.Fragment, {
  children: [
    /* @__PURE__ */ e('h6', { children: 'Background', },),
    /* @__PURE__ */ e('p', {
      children: 'To understand how custom tools work, let\u2019s take a peek under the hood of the Bland AI phone agent.',
    },),
    /* @__PURE__ */ e('p', {
      children:
        'During the conversation, the phone agent is constantly listening to figure out when it\u2019s supposed to respond. When the phone agent realizes it\u2019s time to respond, it reviews the tools in its toolbox and picks between them.',
    },),
    /* @__PURE__ */ t('p', {
      children: [
        'Those tools include a ',
        /* @__PURE__ */ e('code', { children: 'speak', },),
        ', ',
        /* @__PURE__ */ e('code', { children: 'wait', },),
        ', and ',
        /* @__PURE__ */ e('code', { children: 'button press', },),
        ' tool. When you create a custom tool, you add it to the existing \u2018toolbox\u2019 for the phone agent to pick from.',
      ],
    },),
    /* @__PURE__ */ e('p', { children: 'A few natural questions arise:', },),
    /* @__PURE__ */ t('ol', {
      style: {
        '--framer-font-size': '16px',
        '--framer-text-alignment': 'start',
        '--framer-text-color': 'rgb(155, 161, 177)',
        '--framer-text-stroke-width': '0px',
        '--framer-text-transform': 'none',
      },
      children: [
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', { children: 'How do I define my custom tool?', },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', { children: 'How do I make sure my tool gets picked at the right time?', },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: 'How does information from the call get passed to my custom tool\u2019s API request?',
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', { children: 'How do I fill the silence (when my custom tool is running)?', },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', { children: 'How does the response from my custom tool get added to the call?', },),
        },),
      ],
    },),
    /* @__PURE__ */ e('p', { children: 'Keep reading to find out.', },),
    /* @__PURE__ */ t('h6', {
      children: [
        /* @__PURE__ */ e(o, {
          href: 'https://docs.bland.ai/tutorials/custom-tools#creating-your-custom-tool',
          nodeId: 'YjSYmMwoo',
          openInNewTab: false,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: '\u200B', },),
        },),
        'Creating your custom tool',
      ],
    },),
    /* @__PURE__ */ t('h6', {
      children: [
        /* @__PURE__ */ e(o, {
          href: 'https://docs.bland.ai/tutorials/custom-tools#custom-tool-example',
          nodeId: 'YjSYmMwoo',
          openInNewTab: false,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: '\u200B', },),
        },),
        'Custom Tool Example',
      ],
    },),
    /* @__PURE__ */ e(r.div, {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%', },
      children: /* @__PURE__ */ e(n, {
        componentIdentifier: 'module:pVk4QsoHxASnVtUBp6jr/TbhpORLndv1iOkZzyo83/CodeBlock.js:default',
        children: (t2,) =>
          /* @__PURE__ */ e(stdin_default, {
            ...t2,
            code:
              '{\n    "name": "BookAppointment",\n    "description": "Books an appointment for the customer",\n    "url": "https://your-api.com/book-appointment",\n    "method": "POST",\n    "headers": {\n        "Authorization": "Bearer YOUR_API_KEY"\n    },\n    "body": {\n        "date": "{{input.date}}",\n        "time": "{{input.time}}",\n        "service": "{{input.service}}"\n    },\n    "input_schema": {\n        "example": {\n            "speech": "Got it - one second while I book your appointment for tomorrow at 10 AM.",\n            "date": "2024-04-20",\n            "time": "10:00 AM",\n            "service": "Haircut"\n        },\n        "type": "object",\n        "properties": {\n            "speech": "string",\n            "date": "YYYY-MM-DD",\n            "time": "HH:MM AM/PM",\n            "service": "Haircut, Coloring, Trim, or Other"\n        }\n    },\n    "response": {\n        "succesfully_booked_slot": "$.success",\n        "stylist_name": "$.stylist_name"\n    }\n}\n',
            language: 'JSX',
          },),
      },),
    },),
    /* @__PURE__ */ t('h6', {
      children: [
        /* @__PURE__ */ e(o, {
          href: 'https://docs.bland.ai/tutorials/custom-tools#from-api-request-to-custom-tool',
          nodeId: 'YjSYmMwoo',
          openInNewTab: false,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: '\u200B', },),
        },),
        'From API request to custom tool',
      ],
    },),
    /* @__PURE__ */ e('p', {
      children: 'The next step is to convert the API request into a custom tool. Custom tools have the following properties:',
    },),
    /* @__PURE__ */ t('ul', {
      style: {
        '--framer-font-size': '16px',
        '--framer-text-alignment': 'start',
        '--framer-text-color': 'rgb(155, 161, 177)',
        '--framer-text-stroke-width': '0px',
        '--framer-text-transform': 'none',
      },
      children: [
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [/* @__PURE__ */ e('code', { children: 'name', },), ' - the agent will see this in the list of tools',],
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [/* @__PURE__ */ e('code', { children: 'description', },), ' - a short explanation of what the tool does',],
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [/* @__PURE__ */ e('code', { children: 'input_schema', },), ' - a JSON schema describing the input data',],
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [
              /* @__PURE__ */ e('code', { children: 'speech', },),
              ' (optional) - a string that will be spoken to the agent while your tool waits for a response',
            ],
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [
              /* @__PURE__ */ e('code', { children: 'response_data', },),
              ' - An array of objects that describe how to extract data from the response. Within the response data, you can create variables that the phone agent can reference in its prompt.',
            ],
          },),
        },),
      ],
    },),
    /* @__PURE__ */ t('h6', {
      children: [
        /* @__PURE__ */ e(o, {
          href: 'https://docs.bland.ai/tutorials/custom-tools#name-and-description',
          nodeId: 'YjSYmMwoo',
          openInNewTab: false,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: '\u200B', },),
        },),
        'Name & Description',
      ],
    },),
    /* @__PURE__ */ e('p', {
      children:
        'The agent will see the name in the list of tools. The name, plus the description, help the AI phone agent when it decides which tool to use.',
    },),
    /* @__PURE__ */ t('p', {
      children: [
        'For this example we\u2019ll set the name to ',
        /* @__PURE__ */ e('code', { children: 'BookAppointment', },),
        ' and the description to ',
        /* @__PURE__ */ e('code', { children: 'Books an appointment for the customer', },),
        '.',
      ],
    },),
    /* @__PURE__ */ t('h6', {
      children: [
        /* @__PURE__ */ e(o, {
          href: 'https://docs.bland.ai/tutorials/custom-tools#input-schema',
          nodeId: 'YjSYmMwoo',
          openInNewTab: false,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: '\u200B', },),
        },),
        'Input Schema',
      ],
    },),
    /* @__PURE__ */ e('p', {
      children:
        'The input schema is critical. It defines the shape of the API request, the different inputs the request can take, and also includes an example (which helps our system when creating requests).',
    },),
    /* @__PURE__ */ e('p', { children: 'Here\u2019s what the input schema could look like:', },),
    /* @__PURE__ */ e(r.div, {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%', },
      children: /* @__PURE__ */ e(n, {
        componentIdentifier: 'module:pVk4QsoHxASnVtUBp6jr/TbhpORLndv1iOkZzyo83/CodeBlock.js:default',
        children: (t2,) =>
          /* @__PURE__ */ e(stdin_default, {
            ...t2,
            code:
              '    "input_schema": {\n        "example": { // "example" is a special property that shows an example of what the input object the agent creates should look like\n            "speech": "Got it - one second while I book your appointment for tomorrow at 10 AM.",\n            "date": "2024-04-20",\n            "time": "10:00 AM",\n            "service": "Haircut"\n        },\n        "type": "object",\n        "properties": {\n            "speech": "string",\n            "date": "YYYY-MM-DD",\n            "time": "HH:MM AM/PM",\n            "service": "Haircut, Coloring, Trim, or Other"\n        }\n    }\n',
            language: 'JSX',
          },),
      },),
    },),
    /* @__PURE__ */ e('p', { children: 'Two important notes about input schema:', },),
    /* @__PURE__ */ t('ol', {
      style: {
        '--framer-font-size': '16px',
        '--framer-text-alignment': 'start',
        '--framer-text-color': 'rgb(155, 161, 177)',
        '--framer-text-stroke-width': '0px',
        '--framer-text-transform': 'none',
      },
      children: [
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [
              /* @__PURE__ */ e('code', { children: 'input_schema', },),
              ' is converted into the variable ',
              /* @__PURE__ */ e('code', { children: '"{{input}}"', },),
              ' that you can use in the request body/query/headers',
            ],
          },),
        },),
        /* @__PURE__ */ t('li', {
          'data-preset-tag': 'p',
          children: [
            /* @__PURE__ */ t('p', {
              children: [
                'To access nested properties, use dot notation: ',
                /* @__PURE__ */ e('code', { children: '"{{input.property.subproperty}}"', },),
              ],
            },),
            /* @__PURE__ */ e('ul', {
              children: /* @__PURE__ */ e('li', {
                'data-preset-tag': 'p',
                children: /* @__PURE__ */ t('p', {
                  children: [
                    'For example, later on you could use ',
                    /* @__PURE__ */ e('code', { children: '"{{input.service}}"', },),
                    ' to have whatever type of appointment that the customer wants',
                  ],
                },),
              },),
            },),
          ],
        },),
      ],
    },),
    /* @__PURE__ */ e('p', {
      children: 'What you\u2019re doing here is describing the structure of the variables that the agent will create.',
    },),
    /* @__PURE__ */ t('p', {
      children: [
        'Special Note: If you need to gather detailed letter-by-letter information from the user, raise your ',
        /* @__PURE__ */ e('code', { children: 'interruption_threshold', },),
        ' parameter to about ',
        /* @__PURE__ */ e('code', { children: '200', },),
        ' so that the AI doesn\u2019t interject so quickly.',
      ],
    },),
    /* @__PURE__ */ e('p', { children: 'Scroll down to see the full example.', },),
  ],
},);
var richText3 = /* @__PURE__ */ t(a.Fragment, {
  children: [
    /* @__PURE__ */ e('h6', { children: 'Terminologies', },),
    /* @__PURE__ */ e('p', { children: 'To understand how pathways work, let\u2019s first understand the terminologies.', },),
    /* @__PURE__ */ t('h6', {
      children: [
        /* @__PURE__ */ e(o, {
          href: 'https://docs.bland.ai/tutorials/pathways#nodes',
          nodeId: 'YjSYmMwoo',
          openInNewTab: false,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: '\u200B', },),
        },),
        'Nodes',
      ],
    },),
    /* @__PURE__ */ e('p', { children: 'These blocks you see here are called Nodes.', },),
    /* @__PURE__ */ e('img', {
      alt: '',
      className: 'framer-image',
      'data-framer-asset': 'data:framer/asset-reference,sgUzaOsnQY0YKifnh5Pyt88fuw.png',
      'data-framer-height': '215',
      'data-framer-width': '395',
      height: '107',
      src: 'https://framerusercontent.com/images/sgUzaOsnQY0YKifnh5Pyt88fuw.png',
      style: { aspectRatio: '395 / 215', },
      width: '197',
    },),
    /* @__PURE__ */ t('h6', {
      children: [
        /* @__PURE__ */ e(o, {
          href: 'https://docs.bland.ai/tutorials/pathways#pathways',
          nodeId: 'YjSYmMwoo',
          openInNewTab: false,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: '\u200B', },),
        },),
        'Pathways',
      ],
    },),
    /* @__PURE__ */ t('p', {
      children: [
        'Each of these dotted lines is called a Pathway. Their start end end points are the ',
        /* @__PURE__ */ e('code', { children: 'Purple Circles', },),
        ' on the top and bottom of the nodes.',
      ],
    },),
    /* @__PURE__ */ e('p', {
      children:
        'In order to create a pathway from a node, you would click on the purple circle at the bottom of the node and drag your mouse to connect to the top purple circle another node.',
    },),
    /* @__PURE__ */ e('p', {
      children:
        'Upon doing so, you will now have a new dotted line connecting the two nodes, with a \u2018New Pathway\u2019 button in the middle of the line.',
    },),
    /* @__PURE__ */ e('img', {
      alt: '',
      className: 'framer-image',
      'data-framer-asset': 'data:framer/asset-reference,Lj29kUrHv1uwHYcHSMJ0ZA7P0w.png',
      'data-framer-height': '613',
      'data-framer-width': '512',
      height: '306',
      src: 'https://framerusercontent.com/images/Lj29kUrHv1uwHYcHSMJ0ZA7P0w.png',
      srcSet: 'https://framerusercontent.com/images/Lj29kUrHv1uwHYcHSMJ0ZA7P0w.png 512w',
      style: { aspectRatio: '512 / 613', },
      width: '256',
    },),
    /* @__PURE__ */ e('p', {
      children:
        'In order to instruct the agent when to take this pathway, you would click on the Edit icon on the \u2018New Pathway\u2019 button, and input the conditions for when the agent should take this pathway. In the above example, the agent would take this pathway if the user is not available to talk, so I labelled the pathway as \u2018not a good time to talk\u2019.',
    },),
    /* @__PURE__ */ e('img', {
      alt: '',
      className: 'framer-image',
      'data-framer-asset': 'data:framer/asset-reference,nIFVUIGaUcThfbFzTj4bk6hQvI.png',
      'data-framer-height': '612',
      'data-framer-width': '504',
      height: '306',
      src: 'https://framerusercontent.com/images/nIFVUIGaUcThfbFzTj4bk6hQvI.png',
      srcSet: 'https://framerusercontent.com/images/nIFVUIGaUcThfbFzTj4bk6hQvI.png 504w',
      style: { aspectRatio: '504 / 612', },
      width: '252',
    },),
    /* @__PURE__ */ e('p', {
      children:
        'And there you have it! You have now created a pathway from one node to another, and instructed the agent when to take this pathway. You can connect as many nodes as you want in this manner, and create as many pathways as you want. In order to create a new Node, press the \u2018Add new Node\u2019 button at the top-left of the screen.',
    },),
    /* @__PURE__ */ t('h6', {
      children: [
        /* @__PURE__ */ e(o, {
          href: 'https://docs.bland.ai/tutorials/pathways#how-the-pathways-agent-works',
          nodeId: 'YjSYmMwoo',
          openInNewTab: false,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: '\u200B', },),
        },),
        'How the Pathways Agent Works',
      ],
    },),
    /* @__PURE__ */ e('p', {
      children:
        'The agent starts at the first node, and then moves to the next node based on the pathway that the agent decides to take. The agent will then execute the instructions in the node as dialogue, and then move on to the next node based on the pathway that the agent decides to take. This process will continue until the agent decides to end the call.',
    },),
    /* @__PURE__ */ e('p', {
      children:
        'The agent will make decisions based on the labels you put in the pathways, when connecting one node to another, and the dialogue generated will be based on the instructions you set in the nodes.',
    },),
    /* @__PURE__ */ e('img', {
      alt: '',
      className: 'framer-image',
      'data-framer-asset': 'data:framer/asset-reference,3eaWlkVSn5t6j99kERgFQq2Js.png',
      'data-framer-height': '1070',
      'data-framer-width': '1578',
      height: '535',
      src: 'https://framerusercontent.com/images/3eaWlkVSn5t6j99kERgFQq2Js.png',
      srcSet:
        'https://framerusercontent.com/images/3eaWlkVSn5t6j99kERgFQq2Js.png?scale-down-to=512 512w,https://framerusercontent.com/images/3eaWlkVSn5t6j99kERgFQq2Js.png?scale-down-to=1024 1024w,https://framerusercontent.com/images/3eaWlkVSn5t6j99kERgFQq2Js.png 1578w',
      style: { aspectRatio: '1578 / 1070', },
      width: '789',
    },),
    /* @__PURE__ */ e('p', { children: 'For Example,', },),
    /* @__PURE__ */ e('p', {
      children:
        'In this example, at the node named \u2018Ask for reservation info\u2019, the node asks for the user\u2019s reservation information. Based on the user\u2019s response, the agent will then move on to the next node based on the labels you put in the pathways. For the current node, it will check if the user has provided reservation information where the number of guests is either less than 8 or more than 8. If the user has provided reservation information where the number of guests is less than 8, the agent will move on to the node named \u2018Reservation booking\u2019. If the user has provided reservation information where the number of guests is more than 8, the agent will move on to the node named \u2018Transfer Call\u2019. The agent will then execute the instructions in the node as dialogue, and then move on to the next node based on the pathway that the agent decides to take. And the process repeats!',
    },),
    /* @__PURE__ */ t('h6', {
      children: [
        /* @__PURE__ */ e(o, {
          href: 'https://docs.bland.ai/tutorials/pathways#conditions',
          nodeId: 'YjSYmMwoo',
          openInNewTab: false,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: '\u200B', },),
        },),
        'Conditions',
      ],
    },),
    /* @__PURE__ */ e('p', {
      children:
        'Conditions are a way to provide the agent with a condition that must be met in order for the agent to move on to the next node. If the condition is not met, the agent will stay on the same node and ensure the condition is met until the condition is fulfilled.',
    },),
    /* @__PURE__ */ e('p', {
      children:
        'Using the same example above, I set the condition for the \u2018Ask for reservation info\u2019 node as follows - \u201CYou must get the date, time, and number of guests for this reservation\u201D. This means that the agent will stay on the \u2018Ask for reservation info\u2019 node until the user provides the date, time, and number of guests for the reservation. If the user says something else or deviates from the conversation, the agent will stay on the \u2018Ask for reservation info\u2019 node and prompt the user to provide the date, time, and number of guests for the reservation.',
    },),
    /* @__PURE__ */ e('p', {
      children:
        'This helps you to ensure that the user provides the necessary information before moving on to the next node, and helps you to control the flow of the conversation.',
    },),
    /* @__PURE__ */ e('img', {
      alt: '',
      className: 'framer-image',
      'data-framer-asset': 'data:framer/asset-reference,p2Ey8oDMkj3H4xuVrFzMfTMYQg.png',
      'data-framer-height': '1724',
      'data-framer-width': '2368',
      height: '862',
      src: 'https://framerusercontent.com/images/p2Ey8oDMkj3H4xuVrFzMfTMYQg.png',
      srcSet:
        'https://framerusercontent.com/images/p2Ey8oDMkj3H4xuVrFzMfTMYQg.png?scale-down-to=512 512w,https://framerusercontent.com/images/p2Ey8oDMkj3H4xuVrFzMfTMYQg.png?scale-down-to=1024 1024w,https://framerusercontent.com/images/p2Ey8oDMkj3H4xuVrFzMfTMYQg.png?scale-down-to=2048 2048w,https://framerusercontent.com/images/p2Ey8oDMkj3H4xuVrFzMfTMYQg.png 2368w',
      style: { aspectRatio: '2368 / 1724', },
      width: '1184',
    },),
    /* @__PURE__ */ t('h6', {
      children: [
        /* @__PURE__ */ e(o, {
          href: 'https://docs.bland.ai/tutorials/pathways#global-nodes',
          nodeId: 'YjSYmMwoo',
          openInNewTab: false,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: '\u200B', },),
        },),
        'Global Nodes',
      ],
    },),
    /* @__PURE__ */ e('img', {
      alt: '',
      className: 'framer-image',
      'data-framer-asset': 'data:framer/asset-reference,xjNQ1zLC2SV4TyXiu8QcrQnOIw.png',
      'data-framer-height': '208',
      'data-framer-width': '228',
      height: '104',
      src: 'https://framerusercontent.com/images/xjNQ1zLC2SV4TyXiu8QcrQnOIw.png',
      style: { aspectRatio: '228 / 208', },
      width: '114',
    },),
    /* @__PURE__ */ e('p', {
      children:
        'Global Nodes take precendence over the condition decisions made by the agent. You can treat a global node as a node, that every other node in the pathway has a pathway to, with the label as the \u2018Global Pathway Label\u2019.',
    },),
    /* @__PURE__ */ e('p', {
      children:
        'Using the Reservation Booking Example, if the user were to ask a question like \u2018What are the opening hours of the restaurant\u2019 when the agent is at the \u2018Ask for reservation info\u2019 node, the condition decision would not be met as the user did not provide the date, time, and number of guests for the reservation. However, the pathway label would be \u2018user has a question about the restaurant\u2019s hours or location\u2019, which links to a Global Node. As Global Nodes take precedence over the condition decision, the agent would then move to the \u2018Global Node\u2019 named \u2018Restaurant Questions\u2019 and provide the user with the opening hours of the restaurant. After providing the user with the opening hours of the restaurant, the agent would then automatically return to the \u2018Ask for reservation info\u2019 node, and continue with the flow of the conversation.',
    },),
    /* @__PURE__ */ e('p', {
      children:
        'This helps you to handle edge cases where the user might ask a question that is not related to the current conversation, and allows you to provide the user with the information they need, before returning to the conversation.',
    },),
    /* @__PURE__ */ t('p', {
      children: [
        'Tip: The variables ',
        /* @__PURE__ */ e('code', { children: '{{lastUserMessage}}', },),
        ' and ',
        /* @__PURE__ */ e('code', { children: '{{prevNodePrompt}}', },),
        ' can be used in the Global Node to provide the agent with context on what the user said, and steering the conversation back to its own original goal.',
      ],
    },),
  ],
},);
var richText4 = /* @__PURE__ */ t(a.Fragment, {
  children: [
    /* @__PURE__ */ e('h6', { children: /* @__PURE__ */ e('code', { children: 'addPropertyControls()', },), },),
    /* @__PURE__ */ t('p', {
      children: [
        /* @__PURE__ */ e('code', { children: 'addPropertyControls()', },),
        ' is a function from the Framer library that allows you to add property controls to your React components. It gives the user a UI to adjust properties of your component in Framer\'s design environment. This makes it easier for designers to manipulate the design directly, without editing the code.',
      ],
    },),
    /* @__PURE__ */ e('h6', { children: 'Syntax:', },),
    /* @__PURE__ */ e('p', { children: /* @__PURE__ */ e('code', { children: 'addPropertyControls(component, controls)', },), },),
    /* @__PURE__ */ e('h6', { children: 'Parameters:', },),
    /* @__PURE__ */ t('ul', {
      children: [
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [/* @__PURE__ */ e('code', { children: 'component', },), ': The React component you wish to add controls to.',],
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [
              /* @__PURE__ */ e('code', { children: 'controls', },),
              ': An object that defines the controls. Each key-value pair in the object corresponds to a prop in the component. The key is the prop name, and the value is a ControlDescription object.',
            ],
          },),
        },),
      ],
    },),
    /* @__PURE__ */ e('h6', { children: 'Example:', },),
    /* @__PURE__ */ e(r.div, {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%', },
      children: /* @__PURE__ */ e(n, {
        componentIdentifier: 'module:pVk4QsoHxASnVtUBp6jr/TbhpORLndv1iOkZzyo83/CodeBlock.js:default',
        children: (t2,) =>
          /* @__PURE__ */ e(stdin_default, {
            ...t2,
            code:
              'import { addPropertyControls, ControlType } from \'framer\';\n\nfunction MyComponent(props) {\n    return <div>{props.text}</div>;\n}\n\naddPropertyControls(MyComponent, {\n    text: { type: ControlType.String, title: \'Text\' },\n});',
            language: 'JSX',
          },),
      },),
    },),
    /* @__PURE__ */ e('p', { children: /* @__PURE__ */ e('br', { className: 'trailing-break', },), },),
    /* @__PURE__ */ e('h6', { children: /* @__PURE__ */ e('code', { children: 'RenderTarget()', },), },),
    /* @__PURE__ */ t('p', {
      children: [
        /* @__PURE__ */ e('code', { children: 'RenderTarget', },),
        ' is an enum from the Framer library that helps you understand the context in which your component is being rendered. This allows you to adjust your component\'s behavior based on the context. It\'s often used in the ',
        /* @__PURE__ */ e('code', { children: 'useEffect()', },),
        ' hook or conditionally render elements.',
      ],
    },),
    /* @__PURE__ */ e('h6', { children: 'Values:', },),
    /* @__PURE__ */ t('ul', {
      children: [
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [/* @__PURE__ */ e('code', { children: 'RenderTarget.canvas', },), ': Rendered on the Framer Canvas.',],
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [/* @__PURE__ */ e('code', { children: 'RenderTarget.preview', },), ': Rendered in the preview.',],
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [/* @__PURE__ */ e('code', { children: 'RenderTarget.export', },), ': Rendered for export.',],
          },),
        },),
      ],
    },),
    /* @__PURE__ */ e('h6', { children: 'Example:', },),
    /* @__PURE__ */ e(r.div, {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%', },
      children: /* @__PURE__ */ e(n, {
        componentIdentifier: 'module:pVk4QsoHxASnVtUBp6jr/TbhpORLndv1iOkZzyo83/CodeBlock.js:default',
        children: (t2,) =>
          /* @__PURE__ */ e(stdin_default, {
            ...t2,
            code:
              'import { RenderTarget } from \'framer\';\n\nfunction MyComponent() {\n    if (RenderTarget.current === RenderTarget.preview) {\n        // The component is being rendered in the preview\n    }\n}',
            language: 'JSX',
          },),
      },),
    },),
  ],
},);
var richText5 = /* @__PURE__ */ t(a.Fragment, {
  children: [
    /* @__PURE__ */ t('p', {
      children: [
        /* @__PURE__ */ e('code', { children: 'motion', },),
        ' is an object from the Framer Motion library that allows you to animate your components. It exposes all HTML and SVG components as motion components, which means you can animate them directly.',
      ],
    },),
    /* @__PURE__ */ e('h6', { children: /* @__PURE__ */ e('code', { children: 'Animate()', },), },),
    /* @__PURE__ */ e('p', {
      children:
        'The animate function is wonderful little way to use object that defines the final state of the animation. This is where the animation will end.',
    },),
    /* @__PURE__ */ e('h6', { children: /* @__PURE__ */ e('code', { children: 'useMotionValue()', },), },),
    /* @__PURE__ */ t('p', {
      children: [
        /* @__PURE__ */ e('code', { children: 'useMotionValue()', },),
        ' is a React hook from the Framer Motion library used to create a motion value. A motion value is a simple value that Framer Motion can animate.',
      ],
    },),
    /* @__PURE__ */ e('h6', { children: /* @__PURE__ */ e('code', { children: 'useTransform()', },), },),
    /* @__PURE__ */ t('p', {
      children: [
        /* @__PURE__ */ e('code', { children: 'useTransform()', },),
        ' is a React hook from the Framer Motion library that allows you to create a motion value that transforms another motion value or array of motion values through a function or range of input/output values.',
      ],
    },),
  ],
},);
var richText6 = /* @__PURE__ */ t(a.Fragment, {
  children: [
    /* @__PURE__ */ e('h6', { children: 'Sharing Code', },),
    /* @__PURE__ */ e('p', {
      children:
        'A way to share code directly between projects is by using the Copy Import action in the code editor toolbar since every code file in Framer is shareable right away. This will copy an ES modules URL import that you can post into any project or ES modules compatible code setup.',
    },),
    /* @__PURE__ */ e('p', {
      children: 'Here is an example of importing a shared hook from a Framer project into a code file in another project:',
    },),
    /* @__PURE__ */ e(r.div, {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%', },
      children: /* @__PURE__ */ e(n, {
        componentIdentifier: 'module:pVk4QsoHxASnVtUBp6jr/TbhpORLndv1iOkZzyo83/CodeBlock.js:default',
        children: (t2,) =>
          /* @__PURE__ */ e(stdin_default, {
            ...t2,
            code:
              'import { useFriendData } from "https://framer.com/m/useFriendData-KsqW.js"\n  \nexport default function Friends(props) { \n  const friends = useFriendData() \n    \n  return ( \n    <div> {friends.map((friend) => (\n      <div>{friend.name}</div> ))}\n    </div> \n  )\n}\xA0\xA0',
            language: 'JSX',
          },),
      },),
    },),
  ],
},);
var richText7 = /* @__PURE__ */ t(a.Fragment, {
  children: [
    /* @__PURE__ */ e('h6', { children: 'Building Animations', },),
    /* @__PURE__ */ e('p', {
      children:
        'Framer Motion comes built in to all components in Framer, as it already powers all of the no-code animations in Framer. The no-code animations are generally very optimised, and we recommend to start with those. If you want something fully unique, you can leverage the techniques in this guide. Lets start by looking at a couple ways to animate in Framer Motion.',
    },),
    /* @__PURE__ */ e('h6', { children: /* @__PURE__ */ e('code', { children: 'useAnimate()', },), },),
    /* @__PURE__ */ t('p', {
      children: [
        /* @__PURE__ */ e('code', { children: 'useAnimate', },),
        ' provides a way of using the ',
        /* @__PURE__ */ e('code', { children: 'animate', },),
        ' function that is scoped to the elements within your component. It provides a ',
        /* @__PURE__ */ e('code', { children: 'scope', },),
        ' ref, and an ',
        /* @__PURE__ */ e('code', { children: 'animate', },),
        ' function where every DOM selector is scoped to this ref.',
      ],
    },),
    /* @__PURE__ */ e(r.div, {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%', },
      children: /* @__PURE__ */ e(n, {
        componentIdentifier: 'module:pVk4QsoHxASnVtUBp6jr/TbhpORLndv1iOkZzyo83/CodeBlock.js:default',
        children: (t2,) =>
          /* @__PURE__ */ e(stdin_default, {
            ...t2,
            code:
              'function Component() {\n  const [scope, animate] = useAnimate()\n\n  useEffect(() => {\n    // This "li" selector will only select children\n    // of the element that receives `scope`.\n    animate("li", { opacity: 1 })\n  })\n  \n  return <ul ref={scope}>{children}</ul>\n}',
            language: 'JSX',
          },),
      },),
    },),
    /* @__PURE__ */ t('p', {
      children: [
        'Import from ',
        /* @__PURE__ */ e('code', { children: '"framer-motion"', },),
        '. ',
        /* @__PURE__ */ e('code', { children: 'useAnimate', },),
        ' returns two arguments, a ',
        /* @__PURE__ */ e('code', { children: 'scope', },),
        ' ref and an ',
        /* @__PURE__ */ e('code', { children: 'animate', },),
        ' function. The ',
        /* @__PURE__ */ e('code', { children: 'scope', },),
        ' ref must be passed to either a regular HTML/SVG element or a ',
        /* @__PURE__ */ e('code', { children: 'motion', },),
        ' component.',
      ],
    },),
    /* @__PURE__ */ e(r.div, {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%', },
      children: /* @__PURE__ */ e(n, {
        componentIdentifier: 'module:pVk4QsoHxASnVtUBp6jr/TbhpORLndv1iOkZzyo83/CodeBlock.js:default',
        children: (t2,) =>
          /* @__PURE__ */ e(stdin_default, {
            ...t2,
            code:
              'function Component({ children }) {\n  const [scope, animate] = useAnimate()\n  \n  return <ul ref={scope}>{children}</ul>\n}',
            language: 'JSX',
          },),
      },),
    },),
    /* @__PURE__ */ t('p', {
      children: [
        'This scoped ',
        /* @__PURE__ */ e('code', { children: 'animate', },),
        ' function can now be used in effects and event handlers to animate elements. We can either use the scoped element:',
      ],
    },),
    /* @__PURE__ */ e(r.div, {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%', },
      children: /* @__PURE__ */ e(n, {
        componentIdentifier: 'module:pVk4QsoHxASnVtUBp6jr/TbhpORLndv1iOkZzyo83/CodeBlock.js:default',
        children: (t2,) =>
          /* @__PURE__ */ e(stdin_default, { ...t2, code: 'animate(scope.current, { opacity: 1 }, { duration: 1 })', language: 'JSX', },),
      },),
    },),
    /* @__PURE__ */ t('p', {
      children: [
        'Most animations will be performed with the ',
        /* @__PURE__ */ e('code', { children: 'motion', },),
        ' component and the ',
        /* @__PURE__ */ e('code', { children: 'animate', },),
        ' prop. There\'s a ',
        /* @__PURE__ */ e('code', { children: 'motion', },),
        ' component for every HTML and SVG element, for instance ',
        /* @__PURE__ */ e('code', { children: 'motion.div', },),
        ', ',
        /* @__PURE__ */ e('code', { children: 'motion.circle', },),
        ' etc.',
      ],
    },),
    /* @__PURE__ */ e('p', {
      children:
        'When these values change, Framer Motion will automatically generate an animation to the latest values. This animation will feel great by default, but it can be configured with the flexible transition prop.',
    },),
  ],
},);
var richText8 = /* @__PURE__ */ t(a.Fragment, {
  children: [
    /* @__PURE__ */ e('h6', { children: 'Property Controls', },),
    /* @__PURE__ */ t('p', {
      children: [
        'Property Controls allow users to pass properties (or props) to a code component through the Framer interface. When a user selects a code component on the canvas, its Property Controls are visible on the properties panel. Adding ControlsTo give your component Property Controls, import both the\xA0',
        /* @__PURE__ */ e('code', { children: 'addPropertyControls', },),
        '\xA0function and the\xA0',
        /* @__PURE__ */ e('code', { children: 'ControlType', },),
        '\xA0type from the\xA0',
        /* @__PURE__ */ e('code', { children: 'framer', },),
        '\xA0library. ',
      ],
    },),
    /* @__PURE__ */ t('p', {
      children: [
        'In this example, we are adding a Property Control for the component\u2019s\xA0',
        /* @__PURE__ */ e('code', { children: 'text', },),
        '\xA0prop. On the canvas, selecting the component will now display a control that allows us to set this property.',
      ],
    },),
    /* @__PURE__ */ e(r.div, {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%', },
      children: /* @__PURE__ */ e(n, {
        componentIdentifier: 'module:pVk4QsoHxASnVtUBp6jr/TbhpORLndv1iOkZzyo83/CodeBlock.js:default',
        children: (t2,) =>
          /* @__PURE__ */ e(stdin_default, {
            ...t2,
            code:
              'import { addPropertyControls, ControlType } from "framer"\n\nexport function MyComponent(props) {\n  return <div>{props.text}</div>\n}\n\naddPropertyControls(MyComponent, {\n  text: { \n    type: ControlType.String, \n    defaultValue: "Hello World!" \n  },\n})',
            language: 'JSX',
          },),
      },),
    },),
    /* @__PURE__ */ e('h6', { children: 'Hiding Controls', },),
    /* @__PURE__ */ t('p', {
      children: [
        'Controls can be hidden by adding the\xA0',
        /* @__PURE__ */ e('code', { children: 'hidden', },),
        '\xA0function to the property description. The function receives an object containing the set properties and returns a\xA0',
        /* @__PURE__ */ e('code', { children: 'boolean', },),
        '. In this example, we hide the\xA0',
        /* @__PURE__ */ e('code', { children: 'text', },),
        '\xA0property entirely when the connected property (the\xA0',
        /* @__PURE__ */ e('code', { children: 'toggle', },),
        ') is\xA0',
        /* @__PURE__ */ e('code', { children: 'false', },),
        '.Now you can toggle the visibility of the text property control by changing the\xA0',
        /* @__PURE__ */ e('code', { children: 'toggle', },),
        ' boolean from the property panel in Framer.',
      ],
    },),
    /* @__PURE__ */ e(r.div, {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%', },
      children: /* @__PURE__ */ e(n, {
        componentIdentifier: 'module:pVk4QsoHxASnVtUBp6jr/TbhpORLndv1iOkZzyo83/CodeBlock.js:default',
        children: (t2,) =>
          /* @__PURE__ */ e(stdin_default, {
            ...t2,
            code:
              'export function MyComponent(props) {\n  return <div>{props.text}</div>\n}\n\naddPropertyControls(MyComponent, {\n  toggle: {\n    type: ControlType.Boolean,\n    title: "Toggle",\n    enabledTitle: "Show",\n    disabledTitle: "Hide",\n  },\n  text: {\n    type: ControlType.String,\n    title: "Text",\n    hidden(props) {\n      return props.toggle === false\n    },\n  },\n})',
            language: 'JSX',
          },),
      },),
    },),
    /* @__PURE__ */ e('h6', { children: 'Adding Descriptions', },),
    /* @__PURE__ */ t('p', {
      children: [
        'Controls can have a\xA0',
        /* @__PURE__ */ e('em', { children: 'description', },),
        '\xA0property to add documentation about the control in the Framer UI\u2014it appears in the Properties panel just above the control. It also supports adding emphasis and links using Markdown syntax. To add line breaks, use the newline character \u201C',
        /* @__PURE__ */ e('code', { children: '\\n', },),
        '\u201D.',
      ],
    },),
    /* @__PURE__ */ e(r.div, {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%', },
      children: /* @__PURE__ */ e(n, {
        componentIdentifier: 'module:pVk4QsoHxASnVtUBp6jr/TbhpORLndv1iOkZzyo83/CodeBlock.js:default',
        children: (t2,) =>
          /* @__PURE__ */ e(stdin_default, {
            ...t2,
            code:
              'export function MyComponent(props) {\n  return <div>{props.text}</div>\n}\n\naddPropertyControls(MyComponent, {\n  toggle: {\n    type: ControlType.Boolean,\n    title: "Toggle",\n    description: "*On* by default",\n  },\n  text: {\n    type: ControlType.String,\n    title: "Text",\n    description: "[Need inspiration?](https://www.lipsum.com)",\n  },\n})',
            language: 'JSX',
          },),
      },),
    },),
  ],
},);
var richText9 = /* @__PURE__ */ t(a.Fragment, {
  children: [
    /* @__PURE__ */ e('h6', { children: 'Getting Started', },),
    /* @__PURE__ */ t('p', {
      children: [
        'Code Components can extend Framers capabilities by rendering ',
        /* @__PURE__ */ e('em', { children: 'any React Component directly on the canvas', },),
        '. Framer has a built in code editor to write them directly in Framer.',
      ],
    },),
    /* @__PURE__ */ t('p', {
      children: [
        'Framer components are just plain ',
        /* @__PURE__ */ e(o, {
          href: 'https://react.dev/',
          nodeId: 'YjSYmMwoo',
          openInNewTab: false,
          smoothScroll: false,
          children: /* @__PURE__ */ e('a', { children: 'React components', },),
        },),
        ', but they have a few useful extras to empower them in Framer workflows:',
      ],
    },),
    /* @__PURE__ */ t('ul', {
      children: [
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: /* @__PURE__ */ e(o, {
              href: './docs/property-controls',
              nodeId: 'YjSYmMwoo',
              openInNewTab: false,
              smoothScroll: false,
              children: /* @__PURE__ */ e('a', { children: 'Adding Property Controls', },),
            },),
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: /* @__PURE__ */ e(o, {
              href: './docs/framer-motion',
              nodeId: 'YjSYmMwoo',
              openInNewTab: false,
              smoothScroll: false,
              children: /* @__PURE__ */ e('a', { children: 'Framer Motion built-in', },),
            },),
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ e('p', {
            children: /* @__PURE__ */ e(o, {
              href: 'https://www.framer.com/developers/#code-components-sharing',
              nodeId: 'YjSYmMwoo',
              openInNewTab: false,
              smoothScroll: false,
              children: /* @__PURE__ */ e('a', { children: 'Sharing with a URL', },),
            },),
          },),
        },),
      ],
    },),
    /* @__PURE__ */ e('h6', { children: 'Basics', },),
    /* @__PURE__ */ t('p', {
      children: [
        'To create a new code component, go to the assets panel and click Code.\xA0Then, click\xA0Create\xA0Code File. You\'ll be presented with a new code file that exports a single React component. You will see we import some special helper from the ',
        /* @__PURE__ */ e('code', { children: 'framer', },),
        ' library that we use to empower the component in Framer.',
      ],
    },),
    /* @__PURE__ */ e(r.div, {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%', },
      children: /* @__PURE__ */ e(n, {
        componentIdentifier: 'module:pVk4QsoHxASnVtUBp6jr/TbhpORLndv1iOkZzyo83/CodeBlock.js:default',
        children: (t2,) =>
          /* @__PURE__ */ e(stdin_default, {
            ...t2,
            code:
              'import { addPropertyControls, ControlType } from "framer"\n\nexport function MyComponent(props) {\n  return <div>{props.text}</div>\n}\n\naddPropertyControls(MyComponent, {\n  text: { \n    type: ControlType.String, \n    defaultValue: "Hello World!" \n  },\n})',
            language: 'JSX',
          },),
      },),
    },),
    /* @__PURE__ */ t('p', {
      children: [
        'In this case, we are building a normal React component, but adding a control to it, to enable setting of the Text property from the canvas. To set this up we use the ',
        /* @__PURE__ */ e('code', { children: 'addPropertyControls', },),
        ' API as seen above.',
      ],
    },),
    /* @__PURE__ */ e('h6', { children: 'Sizing your Component', },),
    /* @__PURE__ */ t('p', {
      children: [
        'There are four settings for code component layout in Framer: ',
        /* @__PURE__ */ e('code', { children: 'auto', },),
        ', ',
        /* @__PURE__ */ e('code', { children: 'fixed', },),
        ', ',
        /* @__PURE__ */ e('code', { children: 'any', },),
        ', and ',
        /* @__PURE__ */ e('code', { children: 'any-prefer-fixed', },),
        '. These can be set for width or height axis individually, using ',
        /* @__PURE__ */ e('code', { children: '@framerSupportedLayoutWidth', },),
        ' and ',
        /* @__PURE__ */ e('code', { children: '@framerSupportedLayoutHeight', },),
        ' annotations.',
      ],
    },),
    /* @__PURE__ */ t('ul', {
      children: [
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [/* @__PURE__ */ e('code', { children: 'auto', },), '\xA0\u2014 The component will dictate its own size.',],
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [
              /* @__PURE__ */ e('code', { children: 'fixed', },),
              '\xA0\u2014 The component is in a fixed size container & can fill parent.',
            ],
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [
              /* @__PURE__ */ e('code', { children: 'any', },),
              '\xA0\u2014 The user can switch between\xA0auto\xA0and\xA0fixed\xA0sizing.',
            ],
          },),
        },),
        /* @__PURE__ */ e('li', {
          'data-preset-tag': 'p',
          children: /* @__PURE__ */ t('p', {
            children: [
              /* @__PURE__ */ e('code', { children: 'any-prefer-fixed', },),
              '\xA0\u2014 Will insert with sizing set to\xA0fixed.',
            ],
          },),
        },),
      ],
    },),
    /* @__PURE__ */ e('p', {
      children:
        'The following code will make your component have auto-sizing for width, but not height. You can make these two properties any combination of sizing options as long as you have both width & height specified.',
    },),
    /* @__PURE__ */ e(r.div, {
      className: 'framer-text-module',
      style: { height: 'auto', width: '100%', },
      children: /* @__PURE__ */ e(n, {
        componentIdentifier: 'module:pVk4QsoHxASnVtUBp6jr/TbhpORLndv1iOkZzyo83/CodeBlock.js:default',
        children: (t2,) =>
          /* @__PURE__ */ e(stdin_default, {
            ...t2,
            code: '/**\n* @framerSupportedLayoutWidth auto\n* @framerSupportedLayoutHeight fixed\n*/\nexport function Toggle(props) { ...',
            language: 'JSX',
          },),
      },),
    },),
    /* @__PURE__ */ e('p', {
      children:
        'These annotations let Framer know what size your component should be inserted into the canvas when fixed sizing is enabled. In this case, it will insert with a width of 200px and a height of 200px.',
    },),
  ],
},);
var __FramerMetadata__ = {
  'exports': {
    'richText4': { 'type': 'variable', 'annotations': { 'framerContractVersion': '1', }, },
    'richText3': { 'type': 'variable', 'annotations': { 'framerContractVersion': '1', }, },
    'richText2': { 'type': 'variable', 'annotations': { 'framerContractVersion': '1', }, },
    'richText9': { 'type': 'variable', 'annotations': { 'framerContractVersion': '1', }, },
    'richText': { 'type': 'variable', 'annotations': { 'framerContractVersion': '1', }, },
    'richText7': { 'type': 'variable', 'annotations': { 'framerContractVersion': '1', }, },
    'richText5': { 'type': 'variable', 'annotations': { 'framerContractVersion': '1', }, },
    'richText8': { 'type': 'variable', 'annotations': { 'framerContractVersion': '1', }, },
    'richText1': { 'type': 'variable', 'annotations': { 'framerContractVersion': '1', }, },
    'richText6': { 'type': 'variable', 'annotations': { 'framerContractVersion': '1', }, },
    '__FramerMetadata__': { 'type': 'variable', },
  },
};
export { __FramerMetadata__, richText, richText1, richText2, richText3, richText4, richText5, richText6, richText7, richText8, richText9, };
