// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project f667fc580d8d9346 "ApiFlow (copy)", do not edit manually */
import { createStore, } from './chunk-DAGDNIBA.js';

// https :https://framerusercontent.com/modules/ry9N7lTOKGZrBHcWBuZC/uV6Loz3nF9DVbHDWldqM/Theme_Switcher.js
import { jsx as _jsx, } from 'react/jsx-runtime';
import { useEffect, } from 'react';
var useStore = createStore({
  // Set the starting theme below, otherwise default to system.
  theme: 'default',
},);
var changeTheme = (theme,) => {
  const htmlElement = document.getElementsByTagName('html',)[0];
  const bodyElement = document.getElementsByTagName('body',)[0];
  htmlElement.setAttribute('toggle-theme', `${theme}`,);
  bodyElement.setAttribute('toggle-theme', `${theme}`,);
  localStorage.setItem('theme', `${theme}`,);
  const event = new Event('themeChange',);
  window.dispatchEvent(event,);
  return;
};
function withSingleToggle(Component,) {
  return (props,) => {
    const [store, setStore,] = useStore();
    useEffect(() => {
      if (store.theme !== 'dark' && store.theme !== 'light') {
        const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)',);
        let newTheme = mediaQuery.matches ? 'dark' : 'light';
        setStore({ theme: newTheme, },);
        localStorage.setItem('theme', `${newTheme}`,);
      } else {
        localStorage.setItem('theme', `${store.theme}`,);
      }
      const htmlElement = document.getElementsByTagName('html',)[0];
      const bodyElement = document.getElementsByTagName('body',)[0];
      htmlElement && htmlElement.setAttribute('toggle-theme', `${store.theme}`,);
      bodyElement && bodyElement.setAttribute('toggle-theme', `${store.theme}`,);
      let lightThemeTokens = [];
      let darkThemeTokens = [];
      for (let i = 0; i < document.styleSheets.length; i++) {
        const sheet = document.styleSheets[i];
        try {
          for (let rule of sheet.cssRules) {
            if (rule.selectorText === 'body') {
              const style = rule.style;
              for (let j = 0; j < style.length; j++) {
                const propertyName = style[j];
                if (propertyName.includes('--token',)) {
                  const value = style.getPropertyValue(propertyName,);
                  const combinedCssRule = `${propertyName}: ${value};`;
                  lightThemeTokens.push(combinedCssRule,);
                }
              }
              lightThemeTokens = lightThemeTokens.join(' ',);
            } else if (rule.conditionText === '(prefers-color-scheme: dark)') {
              const cssTextIgnore = 'body:not([data-framer-theme])';
              if (!rule.cssText.includes(cssTextIgnore,)) {
                const mediaRulesString = rule.cssRules[0].cssText.replace('body', '',).replace(/\s*{\s*/, '',).replace(/\s*}\s*$/, '',);
                darkThemeTokens = mediaRulesString;
              }
            }
          }
        } catch (e) {
          console.warn('Cannot access stylesheet:',e, sheet.href,);
        }
      }
      let styleElement = document.createElement('style',);
      styleElement.id = 'toggle-theme';
      const customCssRule =
        `body[toggle-theme="light"] {${lightThemeTokens}} body[toggle-theme="dark"]{${darkThemeTokens}} html[toggle-theme="light"] { color-scheme: light; } html[toggle-theme="dark"] { color-scheme: dark; }`;
      styleElement.textContent = customCssRule;
      document.head.appendChild(styleElement,);
      return () => {
        const existingStyleElement = document.getElementById('toggle-theme',);
        if (existingStyleElement) {
          document.head.removeChild(existingStyleElement,);
        }
        htmlElement && htmlElement.setAttribute('toggle-theme', 'system',);
        bodyElement && bodyElement.setAttribute('toggle-theme', 'system',);
      };
    }, [],);
    const handleClick = () => {
      let newTheme = store.theme === 'light' ? 'dark' : 'light';
      setStore({ theme: newTheme, },);
      changeTheme(newTheme,);
    };
    return /* @__PURE__ */ _jsx(Component, {
      ...props,
      variant: store.theme === 'light' ? 'Light' : 'Dark',
      whileHover: { scale: 1.1, },
      onClick: handleClick,
    },);
  };
}

export { withSingleToggle, };
