// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 1a22b140dd1bd637 "ðŸ’› Plugin Help â€”Â Migrate", do not edit manually */
// https :https://framerusercontent.com/modules/VqaHB3gIRuIUtWjo3LNk/7APsVvTxh9wM4MAEGPy4/Checkbox.js
import { jsx as _jsx, } from 'react/jsx-runtime';
import { useEffect as useEffect7, useState as useState3, } from 'react';
import { addPropertyControls, ControlType as ControlType4, motion, RenderTarget as RenderTarget3, } from 'unframer';

// https :https://framerusercontent.com/modules/VTUDdizacRHpwbkOamr7/AykinQJbgwl92LvMGZwu/constants.js
import { ControlType, } from 'unframer';
var containerStyles = {
  position: 'relative',
  width: '100%',
  height: '100%',
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
};
var emptyStateStyle = {
  ...containerStyles,
  borderRadius: 6,
  background: 'rgba(136, 85, 255, 0.3)',
  color: '#85F',
  border: '1px dashed #85F',
  flexDirection: 'column',
};
var defaultEvents = {
  onClick: {
    type: ControlType.EventHandler,
  },
  onMouseEnter: {
    type: ControlType.EventHandler,
  },
  onMouseLeave: {
    type: ControlType.EventHandler,
  },
};
var fontSizeOptions = {
  type: ControlType.Number,
  title: 'Font Size',
  min: 2,
  max: 200,
  step: 1,
  displayStepper: true,
};
var fontControls = {
  font: {
    type: ControlType.Boolean,
    title: 'Font',
    defaultValue: false,
    disabledTitle: 'Default',
    enabledTitle: 'Custom',
  },
  fontFamily: {
    type: ControlType.String,
    title: 'Family',
    placeholder: 'Inter',
    hidden: ({ font, },) => !font,
  },
  fontWeight: {
    type: ControlType.Enum,
    title: 'Weight',
    options: [
      100,
      200,
      300,
      400,
      500,
      600,
      700,
      800,
      900,
    ],
    optionTitles: [
      'Thin',
      'Extra-light',
      'Light',
      'Regular',
      'Medium',
      'Semi-bold',
      'Bold',
      'Extra-bold',
      'Black',
    ],
    hidden: ({ font, },) => !font,
  },
};

// https :https://framerusercontent.com/modules/D4TWeLfcxT6Tysr2BlYg/iZjmqdxVx1EOiM3k1FaW/useOnNavigationTargetChange.js
import { useIsInCurrentNavigationTarget, } from 'unframer';
import { useEffect, } from 'react';

// https :https://framerusercontent.com/modules/ExNgrA7EJTKUPpH6vIlN/eiOrSJ2Ab5M9jPCvVwUz/useConstant.js
import { useRef, } from 'react';

// https :https://framerusercontent.com/modules/D2Lz5CmnNVPZFFiZXalt/QaCzPbriZBfXWZIIycFI/colorFromToken.js
import { Color, } from 'unframer';
function colorFromToken(color,) {
  if (color.startsWith('var(--token-',)) return 'rgb' + color.split(') /*',)[0].split(', rgb',)[1];
  return color;
}
function colorTokentoValue(color,) {
  return Color(colorFromToken(color,),).toValue();
}

// https :https://framerusercontent.com/modules/3mKFSGQqKHV82uOV1eBc/5fbRLvOpxZC0JOXugvwm/isMotionValue.js
import { MotionValue, } from 'unframer';

// https :https://framerusercontent.com/modules/xDiQsqBGXzmMsv7AlEVy/uhunpMiNsbXxzjlXsg1y/useUniqueClassName.js
import * as React from 'react';

// https :https://framerusercontent.com/modules/ETACN5BJyFTSo0VVDJfu/NHRqowOiXkF9UwOzczF7/variantUtils.js
import { ControlType as ControlType2, } from 'unframer';

// https :https://framerusercontent.com/modules/eMBrwoqQK7h6mEeGQUH8/GuplvPJVjmxpk9zqOTcb/isBrowser.js
import { useMemo, } from 'react';

// https :https://framerusercontent.com/modules/v9AWX2URmiYsHf7GbctE/XxKAZ9KlhWqf5x1JMyyF/useOnChange.js
import { useEffect as useEffect3, } from 'react';

// https :https://framerusercontent.com/modules/kNDwabfjDEb3vUxkQlZS/fSIr3AOAYbGlfSPgXpYu/useAutoMotionValue.js
import { useCallback, useEffect as useEffect4, useRef as useRef2, } from 'react';
import { animate, motionValue, RenderTarget, } from 'unframer';

// https :https://framerusercontent.com/modules/cuQH4dmpDnV8YK1mSgQX/KqRXqunFjE6ufhpc7ZRu/useFontControls.js
import { fontStore, } from 'unframer';
import { useEffect as useEffect5, } from 'react';

// https :https://framerusercontent.com/modules/afBE9Yx1W6bY5q32qPxe/m3q7puE2tbo1S2C0s0CT/useRenderTarget.js
import { useMemo as useMemo2, } from 'react';
import { RenderTarget as RenderTarget2, } from 'unframer';

// https :https://framerusercontent.com/modules/zGkoP8tPDCkoBzMdt5uq/0zFSjxIYliHxrQQnryFX/useControlledState.js
import * as React2 from 'react';

// https :https://framerusercontent.com/modules/5SM58HxZHxjjv7aLMOgQ/WXz9i6mVki0bBCrKdqB3/propUtils.js
import { useMemo as useMemo3, } from 'react';
import { ControlType as ControlType3, } from 'unframer';
var borderRadiusControl = {
  borderRadius: {
    title: 'Radius',
    type: ControlType3.FusedNumber,
    toggleKey: 'isMixedBorderRadius',
    toggleTitles: [
      'Radius',
      'Radius per corner',
    ],
    valueKeys: [
      'topLeftRadius',
      'topRightRadius',
      'bottomRightRadius',
      'bottomLeftRadius',
    ],
    valueLabels: [
      'TL',
      'TR',
      'BR',
      'BL',
    ],
    min: 0,
  },
};
var paddingControl = {
  padding: {
    type: ControlType3.FusedNumber,
    toggleKey: 'paddingPerSide',
    toggleTitles: [
      'Padding',
      'Padding per side',
    ],
    valueKeys: [
      'paddingTop',
      'paddingRight',
      'paddingBottom',
      'paddingLeft',
    ],
    valueLabels: [
      'T',
      'R',
      'B',
      'L',
    ],
    min: 0,
    title: 'Padding',
  },
};

// https :https://framerusercontent.com/modules/VqaHB3gIRuIUtWjo3LNk/7APsVvTxh9wM4MAEGPy4/Checkbox.js
async function handleActions(callbacks,) {
  for (const cb of callbacks) {
    if (!cb) continue;
    const value = await cb();
    if (value === false) break;
  }
}
function Checkbox(props,) {
  let {
    activeBackground,
    onToggle,
    onCheck,
    onUncheck,
    isChecked,
    radius,
    topLeft,
    topRight,
    bottomRight,
    bottomLeft,
    isMixed,
    checkSize,
    color,
    inactiveBackground,
    inactiveBorder,
    activeBorder,
    hasBorder,
    borderWidth,
    transition,
    backgroundTransition,
    initialAnimation,
    disabled,
    joinType,
    strokeWidth,
  } = props;
  const [checked, setChecked,] = useState3(isChecked,);
  const borderRadius = isMixed ? `${topLeft}px ${topRight}px ${bottomRight}px ${bottomLeft}px` : `${radius}px`;
  useEffect7(() => {
    setChecked(isChecked,);
  }, [isChecked,],);
  initialAnimation = RenderTarget3.current() !== RenderTarget3.preview ? false : initialAnimation;
  const inactiveBorderStyle = `${borderWidth}px solid ${colorTokentoValue(inactiveBorder,)}`;
  const activeBorderStyle = `${borderWidth}px solid ${colorTokentoValue(activeBorder,)}`;
  const animationBuffer = 15;
  const pathLength = 8.5;
  return /* @__PURE__ */ _jsx('div', {
    style: containerStyle,
    'data-framer-highlight': !disabled,
    children: /* @__PURE__ */ _jsx(motion.div, {
      // @ts-ignore
      style: { ...checkboxStyle, borderRadius, },
      initial: initialAnimation
        ? { background: checked ? colorTokentoValue(inactiveBackground,) : colorTokentoValue(activeBackground,), }
        : false,
      animate: {
        background: checked ? colorTokentoValue(activeBackground,) : colorTokentoValue(inactiveBackground,),
        border: hasBorder ? checked ? activeBorderStyle : inactiveBorderStyle : 'none',
      },
      transition: backgroundTransition,
      onTap: () => {
        if (disabled) return;
        handleActions([() => onToggle && onToggle(!checked,), onCheck, onUncheck, () => setChecked(!checked,),],);
      },
      children: /* @__PURE__ */ _jsx('svg', {
        viewBox: '0 0 12 12',
        style: { margin: 1, width: `${checkSize}%`, height: `${checkSize}%`, },
        children: /* @__PURE__ */ _jsx(motion.path, {
          d: 'M3 6l2 2 4-4',
          fill: 'transparent',
          strokeWidth,
          stroke: color,
          strokeLinecap: 'round',
          strokeLinejoin: joinType,
          strokeDasharray: pathLength + animationBuffer,
          transition,
          initial: {
            strokeDashoffset: initialAnimation
              ? checked ? pathLength + animationBuffer : animationBuffer
              : checked
              ? animationBuffer
              : pathLength + animationBuffer,
          },
          // initial={false}
          animate: { strokeDashoffset: checked ? animationBuffer : pathLength + animationBuffer + 3, },
        },),
      },),
    },),
  },);
}
Checkbox.defaultProps = {
  height: 20,
  width: 20,
  text: 'Get started!',
  activeBackground: '#0099ff',
  activeBorder: '#0066FF',
  inactiveBackground: '#EBEBEB',
  inactiveBorder: '#a5a5a5',
  hasBorder: false,
  radius: 5,
  isChecked: true,
  borderWidth: 1,
  strokeWidth: 1.5,
  joinType: 'round',
  checkSize: 100,
  color: 'white',
  initialAnimation: false,
  disabled: false,
  transition: { duration: 0.15, ease: [0.12, 0.23, 0.5, 1,], type: 'tween', },
  backgroundTransition: { duration: 0.15, ease: [0.12, 0.23, 0.5, 1,], type: 'tween', },
};
addPropertyControls(Checkbox, {
  isChecked: { title: 'Checked', type: ControlType4.Boolean, defaultValue: true, enabledTitle: 'Yes', disabledTitle: 'No', },
  disabled: { title: 'Disabled', type: ControlType4.Boolean, enabledTitle: 'Yes', disabledTitle: 'No', },
  hasBorder: { title: 'Border', type: ControlType4.Boolean, enabledTitle: 'Yes', disabledTitle: 'No', },
  borderWidth: {
    title: 'Width',
    type: ControlType4.Number,
    defaultValue: Checkbox.defaultProps.borderWidth,
    hidden: ({ hasBorder, },) => !hasBorder,
  },
  activeBorder: {
    title: 'Active',
    type: ControlType4.Color,
    defaultValue: Checkbox.defaultProps.activeBackground,
    hidden: ({ hasBorder, },) => !hasBorder,
  },
  inactiveBorder: {
    title: 'Inactive',
    type: ControlType4.Color,
    defaultValue: Checkbox.defaultProps.inactiveBackground,
    hidden: ({ hasBorder, },) => !hasBorder,
  },
  activeBackground: { title: 'Active', type: ControlType4.Color, defaultValue: Checkbox.defaultProps.activeBackground, },
  inactiveBackground: { title: 'Inactive', type: ControlType4.Color, defaultValue: Checkbox.defaultProps.inactiveBackground, },
  color: { title: 'Check', type: ControlType4.Color, defaultValue: Checkbox.defaultProps.color, },
  checkSize: {
    title: 'Check Size',
    type: ControlType4.Number,
    unit: '%',
    min: 0,
    max: 100,
    defaultValue: Checkbox.defaultProps.checkSize,
  },
  joinType: {
    title: 'Corner',
    type: ControlType4.Enum,
    displaySegmentedControl: true,
    options: ['miter', 'round',],
    optionTitles: ['Square', 'Round',],
  },
  strokeWidth: { title: 'Thickness', type: ControlType4.Number, min: 1, max: 5, step: 0.5, displayStepper: true, },
  radius: {
    title: 'Radius',
    type: ControlType4.FusedNumber,
    defaultValue: Checkbox.defaultProps.radius,
    toggleKey: 'isMixed',
    toggleTitles: ['Radius', 'Radius per corner',],
    valueKeys: ['topLeft', 'topRight', 'bottomRight', 'bottomLeft',],
    valueLabels: ['TL', 'TR', 'BR', 'BL',],
    min: 0,
  },
  transition: { title: 'Check', type: ControlType4.Transition, defaultValue: Checkbox.defaultProps.transition, },
  backgroundTransition: { title: 'Fill', type: ControlType4.Transition, defaultValue: Checkbox.defaultProps.transition, },
  initialAnimation: { title: 'On Load', type: ControlType4.Boolean, enabledTitle: 'Animate', disabledTitle: 'Instant', },
  onToggle: { type: ControlType4.EventHandler, },
  onCheck: { type: ControlType4.EventHandler, },
  onUncheck: { type: ControlType4.EventHandler, },
},);
var containerStyle = {
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  height: '100%',
  width: '100%',
  position: 'absolute',
  left: 0,
  right: 0,
  top: 0,
  bottom: 0,
};
var checkboxStyle = {
  width: '100%',
  height: '100%',
  borderRadius: 6,
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  cursor: 'pointer',
  WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)',
};

export { Checkbox, };
