import { OpenAI } from 'openai'
import { get_encoding, encoding_for_model } from 'tiktoken'

import fs from 'fs'
import { a } from 'vitest/dist/suite-ynYMzeLu'
import dedent from 'dedent'
const openai = new OpenAI({ apiKey: process.env.OPENAI_KEY })
export async function main() {
    const [, diffCode] = fs
        .readFileSync('./scripts/diff_ede612b2.patch', 'utf8')
        .split('diff --git a/unframer/src/framer.js b/unframer/src/framer.js')

    const enc = get_encoding('gpt2')

    const encoded = enc.encode(diffCode)
    // console.log(encoded.slice(0, 100))
    // return
    let chunks = [] as { str: string; lineNumber }[]
    // https://platform.openai.com/docs/models/gpt-3-5-turbo
    // gpt-3 turbo max tokens is 16385
    let maxTokens = 16385 / 3
    let i = 0
    let lineNumber = 1
    while (i < encoded.length) {
        const chunk = encoded.slice(i, i + maxTokens)
        const str = new TextDecoder().decode(enc.decode(chunk))
        chunks.push({ str, lineNumber })
        lineNumber += str.split('\n').length
        i += maxTokens
    }
    // chunks = chunks.slice(0, 1)
    let acc = '\n'
    for (let [index, chunk] of chunks.entries()) {
        console.log(`chunk ${index} starting at line ${chunk.lineNumber}:`)
        const response = await openai.chat.completions.create({
            messages: [
                {
                    role: 'system',

                    content:
                        'Find if there is any code behavior change in the following code diff generated by babel compact mode, which does some code transformation like making if statements shorter removing the curly brackets, you will be given diff chunks, the old code was code without the compact mode and the new parts are code with compact mode enabled. If you find any change in how code is evaluated, return that snippet of code and only that. If you don\'t find anything, simply return "no issues" without any markdown or code snippet syntax, just reply with "no issues". Ignore any style differences like collapsed if statements. If there is a difference try to explain what changed in behavior and then write the diff snippet as is, don\' explain anything if you detect no issues, if instead there is an evaluation change, explain step by step, then copy exactly how it is in the original patch. Most changes in if statements should not have behavior changes but keep an eye on them.',
                },
                {
                    role: 'user',
                    content: dedent`
                    var __copyProps = (to, from, except, desc,) => {
                        if (from && typeof from === 'object' || typeof from === 'function') {
                        for (let key7 of __getOwnPropNames(from,)) {
                            if (!__hasOwnProp.call(to, key7,) && key7 !== except) {
                    -        __defProp(to, key7, {
                    -          get: () => from[key7],
                    -          enumerable: !(desc = __getOwnPropDesc(from, key7,)) || desc.enumerable,
                    -        },);
                    +        __defProp(to, key7, { get: () => {from[key7]}, enumerable: !(desc = __getOwnPropDesc(from, key7,)) || desc.enumerable, },);
                            }
                        }
                    }
                `,
                },
                {
                    role: 'assistant',
                    content: dedent`
                    Babel added an additional scope in the get: () => from[key7] method, making it return undefined instead of the result. 

                    \`\`\`diff
                    var __copyProps = (to, from, except, desc,) => {
                        if (from && typeof from === 'object' || typeof from === 'function') {
                        for (let key7 of __getOwnPropNames(from,)) {
                            if (!__hasOwnProp.call(to, key7,) && key7 !== except) {
                    -        __defProp(to, key7, {
                    -          get: () => from[key7],
                    -          enumerable: !(desc = __getOwnPropDesc(from, key7,)) || desc.enumerable,
                    -        },);
                    +        __defProp(to, key7, { get: () => {from[key7]}, enumerable: !(desc = __getOwnPropDesc(from, key7,)) || desc.enumerable, },);
                            }
                        }
                    }
                    \`\`\`
                    
                    `,
                },
                {
                    role: 'user',
                    content: dedent`
                    @@ -18,49 +18,27 @@ var __getOwnPropNames = Object.getOwnPropertyNames;
                    var __getProtoOf = Object.getPrototypeOf;
                    var __hasOwnProp = Object.prototype.hasOwnProperty;
                    var __defNormalProp = (obj, key7, value,) =>
                    -  key7 in obj
                    -    ? __defProp(obj, key7, {
                    -      enumerable: true,
                    -      configurable: true,
                    -      writable: true,
                    -      value,
                    -    },)
                    -    : obj[key7] = value;
                    +  key7 in obj ? __defProp(obj, key7, { enumerable: true, configurable: true, writable: true, value, },) : obj[key7] = value;
                    var __commonJS = (cb, mod,) =>
                    function __require() {
                    -    return mod || (0, cb[__getOwnPropNames(cb,)[0]])(
                    -      (mod = {
                    -        exports: {},
                    -      }).exports,
                    -      mod,
                    -    ),
                    -      mod.exports;
                    +    return mod || (0, cb[__getOwnPropNames(cb,)[0]])((mod = { exports: {}, }).exports, mod,), mod.exports;
                    };
                    var __copyProps = (to, from, except, desc,) => {
                    if (from && typeof from === 'object' || typeof from === 'function') {
                        for (let key7 of __getOwnPropNames(from,)) {
                        if (!__hasOwnProp.call(to, key7,) && key7 !== except) {
                    -        __defProp(to, key7, {
                    -          get: () => from[key7],
                    -          enumerable: !(desc = __getOwnPropDesc(from, key7,)) || desc.enumerable,
                    -        },);
                    +        __defProp(to, key7, { get: () => from[key7], enumerable: !(desc = __getOwnPropDesc(from, key7,)) || desc.enumerable, },);
                        }
                        }
                    }
                    return to;
                    };
                `,
                },
                {
                    role: 'assistant',
                    content: dedent`no issues`,
                },
                { role: 'user', content: chunk.str },
            ],
            model: 'gpt-3.5-turbo',
            stream: true,
            temperature: 0.5,
        })
        const resultFile = 'scripts/gpt-result.md'
        let part = 0
        
        for await (const message of response) {
            const delta = message.choices[0].delta.content
            process.stdout.write(delta || '')
            acc += delta || ''
            part += 1
            if (part % 10 == 0) {
                fs.writeFileSync(resultFile, acc)
            }
        }

        console.log()
    }
}

main()
